{"ast":null,"code":"import _classCallCheck from \"/home/huynh/workspace/webtest/callphone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/huynh/workspace/webtest/callphone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/huynh/workspace/webtest/callphone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/huynh/workspace/webtest/callphone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/huynh/workspace/webtest/callphone/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/huynh/workspace/webtest/callphone/src/components/Runtime.js\";\nimport React, { Component } from 'react';\n\nvar Runtime =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Runtime, _Component);\n\n  function Runtime() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Runtime);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Runtime)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      time: new Date(),\n      startTime: Date.now() - 10\n    };\n    return _this;\n  }\n\n  _createClass(Runtime, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var isCalling = this.props.isCalling;\n      console.log('isCalling', isCalling);\n\n      if (isCalling) {\n        this.intervalID = setInterval(function () {\n          return _this2.tick();\n        }, 1000);\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {}\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.intervalID);\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      var _this3 = this;\n\n      var now = Date.now();\n      console.log('on tick', this.props.startTime / 1000);\n      this.setState({\n        time: now\n      }, function () {\n        var seconds = Math.round((Date.now() - _this3.props.startTime) / 1000);\n\n        _this3.props.onTick(seconds);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var seconds = Math.round((this.state.time - this.props.startTime) / 1000).toFixed(0).toLocaleString();\n      var minute = (seconds - seconds % 60) / 60;\n      var hour = (minute - minute % 60) / 60;\n      var secondClock = seconds - minute * 60;\n      var minuteClock = minute - hour * 60;\n      return React.createElement(\"div\", {\n        className: \"run-time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row time-call\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-5 runtime\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Call Time: \", ('0' + hour).slice(-2), \":\", ('0' + minuteClock).slice(-2), \":\", ('0' + secondClock).slice(-2))));\n    }\n  }]);\n\n  return Runtime;\n}(Component);\n\nexport default Runtime;","map":{"version":3,"sources":["/home/huynh/workspace/webtest/callphone/src/components/Runtime.js"],"names":["React","Component","Runtime","state","time","Date","startTime","now","isCalling","props","console","log","intervalID","setInterval","tick","nextProps","clearInterval","setState","seconds","Math","round","onTick","toFixed","toLocaleString","minute","hour","secondClock","minuteClock","slice"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,O;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,IAAI,EAAE,IAAIC,IAAJ,EADF;AAEJC,MAAAA,SAAS,EAAED,IAAI,CAACE,GAAL,KAAW;AAFlB,K;;;;;;wCAIY;AAAA;;AAAA,UACZC,SADY,GACE,KAAKC,KADP,CACZD,SADY;AAEpBE,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,SAAzB;;AAEA,UAAIA,SAAJ,EAAe;AACb,aAAKI,UAAL,GAAkBC,WAAW,CAC3B;AAAA,iBAAM,MAAI,CAACC,IAAL,EAAN;AAAA,SAD2B,EAE3B,IAF2B,CAA7B;AAID;AACF;;;8CAEyBC,S,EAAW,CAEpC;;;2CAEsB;AACrBC,MAAAA,aAAa,CAAC,KAAKJ,UAAN,CAAb;AACD;;;2BAEM;AAAA;;AACL,UAAML,GAAG,GAAGF,IAAI,CAACE,GAAL,EAAZ;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKF,KAAL,CAAWH,SAAX,GAAqB,IAA5C;AACA,WAAKW,QAAL,CAAc;AACZb,QAAAA,IAAI,EAAEG;AADM,OAAd,EAEG,YAAM;AACP,YAAMW,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACf,IAAI,CAACE,GAAL,KAAa,MAAI,CAACE,KAAL,CAAWH,SAAzB,IAAoC,IAA/C,CAAhB;;AACA,QAAA,MAAI,CAACG,KAAL,CAAWY,MAAX,CAAkBH,OAAlB;AACD,OALD;AAMD;;;6BAEQ;AACP,UAAIA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,CAAC,KAAKjB,KAAL,CAAWC,IAAX,GAAkB,KAAKK,KAAL,CAAWH,SAA9B,IAAyC,IAApD,EAA0DgB,OAA1D,CAAkE,CAAlE,EAAqEC,cAArE,EAAd;AACA,UAAIC,MAAM,GAAG,CAACN,OAAO,GAAGA,OAAO,GAAG,EAArB,IAA2B,EAAxC;AACA,UAAIO,IAAI,GAAG,CAACD,MAAM,GAAGA,MAAM,GAAC,EAAjB,IAAqB,EAAhC;AACA,UAAIE,WAAW,GAAGR,OAAO,GAAGM,MAAM,GAAC,EAAnC;AACA,UAAIG,WAAW,GAAGH,MAAM,GAAGC,IAAI,GAAC,EAAhC;AAEA,aACC;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACa,CAAC,MAAIA,IAAL,EAAWG,KAAX,CAAiB,CAAC,CAAlB,CADb,OACoC,CAAC,MAAID,WAAL,EAAkBC,KAAlB,CAAwB,CAAC,CAAzB,CADpC,OACkE,CAAC,MAAIF,WAAL,EAAkBE,KAAlB,CAAwB,CAAC,CAAzB,CADlE,CADD,CADD,CADD;AASD;;;;EApDmB3B,S;;AAuDtB,eAAeC,OAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Runtime extends Component {\n    state = {\n        time: new Date(),\n        startTime: Date.now()-10\n    }\n    componentDidMount() {\n    const { isCalling } = this.props;\n    console.log('isCalling', isCalling)\n\n    if (isCalling) {\n      this.intervalID = setInterval(\n        () => this.tick(),\n        1000\n      );  \n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  tick() {\n    const now = Date.now();\n    console.log('on tick', this.props.startTime/1000);\n    this.setState({\n      time: now,\n    }, () => {\n      const seconds = Math.round((Date.now() - this.props.startTime)/1000);\n      this.props.onTick(seconds);\n    });\n  }\n\n  render() {\n    let seconds = Math.round((this.state.time - this.props.startTime)/1000).toFixed(0).toLocaleString();\n    let minute = (seconds - seconds % 60) / 60;\n    let hour = (minute - minute%60)/60;\n    let secondClock = seconds - minute*60;\n    let minuteClock = minute - hour*60;\n\n    return (\n    \t<div className=\"run-time\">\n    \t\t<div className=\"row time-call\">\n    \t\t\t<div className=\"col-5 runtime\">\n    \t\t\t\tCall Time: {('0'+hour).slice(-2)}:{('0'+minuteClock).slice(-2)}:{('0'+secondClock).slice(-2)}\n    \t\t\t</div>\n    \t\t</div>\n    \t</div>\n    );\n  }\n}\n\nexport default Runtime;\n"]},"metadata":{},"sourceType":"module"}