{"ast":null,"code":"import _classCallCheck from \"/home/huynh/workspace/webtest/callphone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/huynh/workspace/webtest/callphone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/huynh/workspace/webtest/callphone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/huynh/workspace/webtest/callphone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/huynh/workspace/webtest/callphone/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/huynh/workspace/webtest/callphone/src/components/Runtime.js\";\nimport React, { Component } from 'react';\n\nvar caculateCallingTime = function caculateCallingTime(currentTime, startTime) {\n  var callingTime = Math.round((currentTime - startTime) / 1000); //\n\n  return callingTime;\n};\n\nvar Runtime =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Runtime, _Component);\n\n  function Runtime(props) {\n    var _this;\n\n    _classCallCheck(this, Runtime);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Runtime).call(this, props));\n\n    _this.getCallingtime = function (value) {\n      _this.setState({\n        callingTime: Math.round((_this.state.time - _this.props.startTime) / 1000).toFixed(0).toLocaleString()\n      }, function () {\n        _this.props.onSetCallingTime(_this.state.callingTime);\n      });\n    };\n\n    _this.state = {\n      time: new Date(),\n      callingTime: 0\n    };\n    return _this;\n  }\n\n  _createClass(Runtime, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.intervalID = setInterval(function () {\n        return _this2.tick();\n      }, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.intervalID);\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      var currentTime = new Date();\n      this.setState({\n        time: currentTime,\n        callingTime: caculateCallingTime(currentTime, this.props.startTime)\n      });\n    }\n  }, {\n    key: \"stopTick\",\n    value: function stopTick() {\n      clearInterval(this.intervalID); // clear interval\n      // return { time, callingTime }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var seconds = Math.round((this.state.time - this.props.startTime) / 1000).toFixed(0).toLocaleString();\n      var minute = (seconds - seconds % 60) / 60;\n      var hour = (minute - minute % 60) / 60;\n      var secondClock = seconds - minute * 60;\n      var minuteClock = minute - hour * 60;\n\n      if (seconds > 0) {\n        return React.createElement(\"div\", {\n          className: \"run-time\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row time-call\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-5 runtime\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, \"Call Time: \", ('0' + hour).slice(-2), \":\", ('0' + minuteClock).slice(-2), \":\", ('0' + secondClock).slice(-2))));\n      } else return React.createElement(\"div\", {\n        className: \"run-time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row time-call\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-5 runtime\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Call Time: 00:00:00\")));\n    }\n  }]);\n\n  return Runtime;\n}(Component);\n\nexport default Runtime;","map":{"version":3,"sources":["/home/huynh/workspace/webtest/callphone/src/components/Runtime.js"],"names":["React","Component","caculateCallingTime","currentTime","startTime","callingTime","Math","round","Runtime","props","getCallingtime","value","setState","state","time","toFixed","toLocaleString","onSetCallingTime","Date","intervalID","setInterval","tick","clearInterval","seconds","minute","hour","secondClock","minuteClock","slice"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nconst caculateCallingTime = (currentTime, startTime) => {\n  const callingTime = Math.round((currentTime - startTime)/1000);\n  //\n  return callingTime;\n}\n\nclass Runtime extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: new Date(),\n      callingTime: 0,\n    };\n  }\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  tick() {\n    const currentTime = new Date();\n    this.setState({\n      time: currentTime,\n      callingTime: caculateCallingTime(currentTime, this.props.startTime),\n    });\n  }\n\n  stopTick() {\n    clearInterval(this.intervalID);\n    \n    // clear interval\n    // return { time, callingTime }\n    \n  }\n\n  getCallingtime =(value)=>{\n    this.setState({\n      callingTime:Math.round((this.state.time - this.props.startTime)/1000).toFixed(0).toLocaleString()\n    },()=>{\n      this.props.onSetCallingTime(this.state.callingTime)\n    })\n  }\n\n  render() {\n    let seconds = Math.round((this.state.time - this.props.startTime)/1000).toFixed(0).toLocaleString();\n    let minute = (seconds - seconds % 60) / 60;\n    let hour = (minute - minute%60)/60;\n    let secondClock = seconds - minute*60;\n    let minuteClock = minute - hour*60;\n\n    if(seconds>0){\n      return (\n      <div className=\"run-time\">\n        <div className=\"row time-call\">\n          <div className=\"col-5 runtime\">\n            Call Time: {('0'+hour).slice(-2)}:{('0'+minuteClock).slice(-2)}:{('0'+secondClock).slice(-2)}\n          </div>\n        </div>\n      </div>\n    )\n    }\n    else \n      return(\n        <div className=\"run-time\">\n          <div className=\"row time-call\">\n            <div className=\"col-5 runtime\">\n              Call Time: 00:00:00\n            </div>\n          </div>\n        </div>\n      );\n  }\n}\n\nexport default Runtime;\n"]},"metadata":{},"sourceType":"module"}